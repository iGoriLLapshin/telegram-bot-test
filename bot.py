# bot.py ‚Äî –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏

import os
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
try:
    from questions import questions
except ImportError:
    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥—ë–Ω questions.py. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
    questions = [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
            "options": ["3", "4", "5", "6"],
            "correct": 1,
            "explanation": "2 + 2 = 4 ‚Äî —ç—Ç–æ –±–∞–∑–æ–≤–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞."
        },
        {
            "question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
            "options": ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–ú–∞–¥—Ä–∏–¥"],
            "correct": 2,
            "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ü–∞—Ä–∏–∂."
        }
    ]

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_data:
        del user_data[user_id]

    # –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    selected_questions = random.sample(questions, min(10, len(questions)))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data[user_id] = {
        "questions": selected_questions,
        "index": 0,
        "correct_count": 0,
        "start_time": time.time(),
        "answered": False
    }

    # –ó–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(update, context, user_id)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    data = user_data[user_id]
    if data["index"] >= len(data["questions"]):
        await show_results(update, context, user_id)
        return

    q = data["questions"][data["index"]]
    options = q["options"]

    keyboard = [[InlineKeyboardButton(options[i], callback_data=f"ans_{i}") for i in range(4)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if data["index"] == 0:
            await update.message.reply_text(
                f"‚è± –ù–∞—á–∏–Ω–∞–µ–º! –í—Å–µ–≥–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n{q['question']}",
                reply_markup=reply_markup
            )
        else:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=update.callback_query.message.message_id,
                text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{q['question']}",
                reply_markup=reply_markup
            )
    except:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{q['question']}",
            reply_markup=reply_markup
        )


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ ===
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if user_id not in user_data:
        await query.edit_message_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç.")
        return

    data = user_data[user_id]
    if data["index"] >= len(data["questions"]):
        await show_results(update, context, user_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    if data["answered"]:
        await query.edit_message_text("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    try:
        chosen = int(query.data.split("_")[1])
    except:
        await query.edit_message_text("–û—à–∏–±–∫–∞.")
        return

    q = data["questions"][data["index"]]
    correct = q["correct"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if chosen == correct:
        data["correct_count"] += 1
        data["answered"] = True
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Å—Ä–∞–∑—É —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        data["index"] += 1
        await send_next_question(update, context, user_id)
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        data["answered"] = True
        explanation = q["explanation"]
        keyboard = [[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=update.callback_query.message.message_id,
                text=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{q['options'][correct]}*\n\nüìå –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{q['options'][correct]}*\n\nüìå –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )


# === –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ ===
async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_data:
        await query.edit_message_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç.")
        return

    data = user_data[user_id]
    data["index"] += 1
    data["answered"] = False

    await send_next_question(update, context, user_id)


# === –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤ ===
async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        return

    data = user_data[user_id]
    correct = data["correct_count"]
    total = len(data["questions"])
    elapsed = int(time.time() - data["start_time"])

    minutes = elapsed // 60
    seconds = elapsed % 60

    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct} –∏–∑ {total}\n‚è± –í—Ä–µ–º—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        )
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    del user_data[user_id]


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    import os
    from telegram.ext import Application

    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click, pattern="^ans_"))
    application.add_handler(CallbackQueryHandler(next_question, pattern="^next$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë–º /start")

    try:
        application.run_polling(
            allowed_updates=["callback_query", "message"],
            drop_pending_updates=True
        )
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


















