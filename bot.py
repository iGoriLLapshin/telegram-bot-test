# bot.py
# Telegram-–±–æ—Ç: —Ç–µ—Å—Ç –∏–∑ 100 –≤–æ–ø—Ä–æ—Å–æ–≤, 100 —Å–µ–∫—É–Ω–¥, –ø–æ–¥—Å—á—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

import os
import random
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã ===
try:
    from questions import questions
except ImportError:
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ questions.py –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
    questions = [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
            "options": ["3", "4", "5", "6"],
            "correct": 1
        },
        {
            "question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
            "options": ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–ú–∞–¥—Ä–∏–¥"],
            "correct": 2
        },
        {
            "question": "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ–±–∞?",
            "options": ["Python", "Java", "C++", "JavaScript"],
            "correct": 3
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
            "options": ["7", "8", "9", "10"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫–æ–π –≥–∞–∑ –º—ã –≤–¥—ã—Ö–∞–µ–º?",
            "options": ["–£–≥–ª–µ–∫–∏—Å–ª—ã–π", "–ê–∑–æ—Ç", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–ì–µ–ª–∏–π"],
            "correct": 2
        }
    ]
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –î–æ–±–∞–≤—å—Ç–µ questions.py —Å 100 –≤–æ–ø—Ä–æ—Å–∞–º–∏.")

# === –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_data = {}


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_data:
        del user_data[user_id]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    shuffled = random.sample(questions, len(questions))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data[user_id] = {
        "questions": shuffled,
        "index": 0,
        "correct_count": 0,
        "total_count": len(shuffled),
        "timer_ended": False
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(update, context, user_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 100 —Å–µ–∫—É–Ω–¥
    context.job_queue.run_once(
        end_test, 100, data=user_id, chat_id=update.effective_chat.id
    )


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    data = user_data[user_id]
    if data["index"] >= data["total_count"] or data["timer_ended"]:
        return

    q = data["questions"][data["index"]]
    options = q["options"]

    # –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = [[InlineKeyboardButton(options[i], callback_data=f"ans_{i}") for i in range(4)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if data["index"] == 0:
            # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await update.message.reply_text(
                f"‚è± –£ —Ç–µ–±—è 100 —Å–µ–∫—É–Ω–¥! –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {data['total_count']}\n\n{q['question']}",
                reply_markup=reply_markup
            )
        else:
            # –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=update.callback_query.message.message_id,
                text=f"‚úÖ –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.\n\n{q['question']}",
                reply_markup=reply_markup
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{q['question']}",
            reply_markup=reply_markup
        )


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ===
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞—Ç –ª–∏ —Ç–µ—Å—Ç
    if user_id not in user_data:
        try:
            await query.edit_message_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏ /start")
        except:
            await query.message.reply_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏ /start")
        return

    data = user_data[user_id]
    if data["timer_ended"]:
        try:
            await query.edit_message_text("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except:
            await query.message.reply_text("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    try:
        chosen = int(query.data.split("_")[1])  # –∏–∑ 'ans_2' ‚Üí 2
    except (IndexError, ValueError):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    correct = data["questions"][data["index"]]["correct"]
    if chosen == correct:
        data["correct_count"] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data["index"] += 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(update, context, user_id)


# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É ===
async def end_test(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data  # –ø–æ–ª—É—á–∞–µ–º user_id –∏–∑ data
    chat_id = job.chat_id

    if user_id not in user_data:
        return

    data = user_data[user_id]
    data["timer_ended"] = True

    correct = data["correct_count"]
    total = data["index"]  # —Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ–ª–∏ –∑–∞–¥–∞—Ç—å

    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üèÅ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n\n"
                 f"–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
                 f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} ‚úÖ\n\n"
                 f"–ú–æ–ª–æ–¥–µ—Ü!"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.job_queue.run_once(cleanup_user, 5, data=user_id, chat_id=chat_id)


# === –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def cleanup_user(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data
    if user_id in user_data:
        del user_data[user_id]


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–ª—è Render) ===
if __name__ == "__main__":
    import os
    import asyncio
    from telegram.ext import Application

    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë–º –∫–æ–º–∞–Ω–¥—É /start")

    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


