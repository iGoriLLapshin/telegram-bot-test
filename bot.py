# bot.py ‚Äî Telegram-–±–æ—Ç: 20 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Render.com —Å keep-alive —á–µ—Ä–µ–∑ Flask

import os
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# === –î–æ–±–∞–≤–ª—è–µ–º Flask –¥–ª—è keep-alive (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª –Ω–∞ Render) ===
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return '<b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>'

def run():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

def keep_alive():
    t = Thread(target=run)
    t.start()


# === –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã ===
try:
    from questions import questions
except ImportError:
    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥—ë–Ω questions.py. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
    questions = [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
            "options": ["3", "4", "5", "6"],
            "correct": 1,
            "explanation": "–ü–æ—Ç–æ–º—É —á—Ç–æ 2 + 2 = 4 –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏."
        },
        {
            "question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
            "options": ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–ú–∞–¥—Ä–∏–¥"],
            "correct": 2,
            "explanation": "–ü–∞—Ä–∏–∂ ‚Äî —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏ —Å IX –≤–µ–∫–∞."
        },
        {
            "question": "–ö–∞–∫–æ–π –≥–∞–∑ –º—ã –≤–¥—ã—Ö–∞–µ–º –∏–∑ –≤–æ–∑–¥—É—Ö–∞?",
            "options": ["–£–≥–ª–µ–∫–∏—Å–ª—ã–π", "–ê–∑–æ—Ç", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–ì–µ–ª–∏–π"],
            "correct": 2,
            "explanation": "–ö–∏—Å–ª–æ—Ä–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 21% –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –Ω—É–∂–µ–Ω –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è."
        }
    ]


# === –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_data = {}


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_
        del user_data[user_id]

    # –í—ã–±–∏—Ä–∞–µ–º 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    selected_questions = random.sample(questions, min(20, len(questions)))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data[user_id] = {
        "questions": selected_questions,
        "index": 0,
        "correct_count": 0,
        "start_time": time.time(),
        "answered": False
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ /start (–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
    if update.message:
        await update.message.reply_text(
            f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–∑ {len(selected_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤!\n"
            "–û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è."
        )

    # –ó–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(update, context, user_id)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    data = user_data[user_id]
    if data["index"] >= len(data["questions"]):
        await show_results(update, context, user_id)
        return

    data["answered"] = False
    q = data["questions"][data["index"]]

    message_text = f"üìù –í–æ–ø—Ä–æ—Å {data['index'] + 1} –∏–∑ {len(data['questions'])}:\n\n"
    message_text += f"{q['question']}\n\n"
    for i, option in enumerate(q["options"], start=1):
        message_text += f"{i}. {option}\n"
    message_text += "\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:"

    buttons = []
    row = []
    for i in range(1, len(q["options"]) + 1):
        row.append(InlineKeyboardButton(str(i), callback_data=f"ans_{i-1}"))
        if len(row) == 4 or i == len(q["options"]):
            buttons.append(row)
            row = []
    reply_markup = InlineKeyboardMarkup(buttons)

    try:
        if data["index"] == 0 and update.message:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        else:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=update.callback_query.message.message_id,
                text=message_text,
                reply_markup=reply_markup
            )
    except:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message_text,
            reply_markup=reply_markup
        )


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ ===
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if user_id not in user_
        try:
            await query.edit_message_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        except:
            await query.message.reply_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return

    data = user_data[user_id]
    if data["index"] >= len(data["questions"]) or data["answered"]:
        await show_results(update, context, user_id)
        return

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    try:
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
            reply_markup=None
        )
    except:
        pass

    try:
        chosen_index = int(query.data.split("_")[1])
    except (IndexError, ValueError):
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        return

    q = data["questions"][data["index"]]
    correct_index = q["correct"]

    if chosen_index == correct_index:
        data["correct_count"] += 1
        data["answered"] = True
        data["index"] += 1

        if data["index"] >= len(data["questions"]):
            await show_results(update, context, user_id)
            return

        await send_next_question(update, context, user_id)
    else:
        data["answered"] = True
        correct_option = q["options"][correct_index]
        explanation = q["explanation"]

        feedback_text = (
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n"
            f"üìå *–í–æ–ø—Ä–æ—Å:* {q['question']}\n\n"
            f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* {correct_index + 1}. {correct_option}\n\n"
            f"üìò *–ü–æ—è—Å–Ω–µ–Ω–∏–µ:*\n{explanation}"
        )

        keyboard = [[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id,
                text=feedback_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=feedback_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )


# === –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ ===
async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_
        await query.edit_message_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return

    data = user_data[user_id]
    data["index"] += 1
    data["answered"] = False

    if data["index"] >= len(data["questions"]):
        await show_results(update, context, user_id)
        return

    await send_next_question(update, context, user_id)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ" ===
async def restart_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)  # –ø–µ—Ä–µ–¥–∞—ë–º update ‚Äî start —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è


# === –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤ ===
async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    if user_id not in user_
        return

    data = user_data[user_id]
    correct = data["correct_count"]
    total = len(data["questions"])
    elapsed = int(time.time() - data["start_time"])
    minutes = elapsed // 60
    seconds = elapsed % 60

    # –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è
    if correct >= total * 0.9:
        level = "üèÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª! –í—ã –æ—Ç–ª–∏—á–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞."
    elif correct >= total * 0.7:
        level = "üìà –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å. –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
    else:
        level = "üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏."

    result_text = (
        f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct} –∏–∑ {total}\n"
        f"‚è± –í—Ä–µ–º—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n\n"
        f"{level}"
    )

    # –ö–Ω–æ–ø–∫–∏: –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ + –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
    keyboard = [
        [InlineKeyboardButton("üîÅ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="restart")],
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", switch_inline_query=f"–Ø –Ω–∞–±—Ä–∞–ª {correct}/{total} –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤!")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=result_text,
            reply_markup=reply_markup,
            parse_mode=None
        )
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if user_id in user_
        del user_data[user_id]


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive (—á—Ç–æ–±—ã Render –Ω–µ "—Å–ø–∞–ª")
    keep_alive()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click, pattern="^ans_"))
    application.add_handler(CallbackQueryHandler(next_question, pattern="^next$"))
    application.add_handler(CallbackQueryHandler(restart_test, pattern="^restart$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë–º /start")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        application.run_polling(
            allowed_updates=["callback_query", "message"],
            drop_pending_updates=True
        )
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")




